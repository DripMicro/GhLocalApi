FORMAT: 1A
HOST: http://192.168.1.15:8008

# Google Home
This is an unofficial documentation of the local API used by the Home app to communicate with the device.



## Getting Started



The port for the http server is `8008` so the base url for these endpoints is:  

`http://<google-home-ip>:8008`  

Get the IP of Google Home from the Google Home app (Device Settings -> End of list) or from your router.



There is no auth mechanism in place as of now.



GET requests are simple, in the browser kind.  

POST requests need to set the header: `content-type: application/json`

# Group Device Info

## Eureka Info [/setup/eureka_info]

### Eureka Info [GET]
This gives most of the device info. The GET parameter `param` is a comma separated list of json keys to fetch. Currently, these params are known: `version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer`



Nested items can also be filtered using the dot notation. Example: `audio.digital`



The `options` GET parameter is always set to `detail`. No other value is known.
+ Attributes
    + params (string, required)

        + Sample: version,audio,name,build_info,detail,device_info,net,wifi,setup,settings,opt_in,opencast,multizone,proxy,night_mode_params,user_eq,room_equalizer
    + options (string, required)

        + Sample: detail

+ Response 200 (application/json)
    + Attributes (Eureka InfoResponse)

    + Body

            {"audio":{"digital":false},"build_info":{"build_type":2,"cast_build_revision":"1.32.118652","cast_control_version":1,"preview_channel_state":4,"release_track":"preview-joining-stable-channel","system_build_number":"118652"},"detail":{"icon_list":[{"depth":32,"height":55,"mimetype":"image/png","url":"/setup/icon.png","width":98}],"locale":{"display_string":"English (United States)"},"timezone":{"display_string":"India Standard Time (Kolkata)","offset":330}},"device_info":{"4k_blocked":0,"capabilities":{"assistant_supported":true,"audio_hdr_supported":false,"audio_surround_mode_supported":false,"ble_supported":true,"bluetooth_audio_sink_supported":true,"bluetooth_audio_source_supported":true,"bluetooth_supported":true,"cloudcast_supported":true,"display_supported":false,"fdr_supported":false,"hdmi_prefer_50hz_supported":false,"hdmi_prefer_high_fps_supported":false,"hi_res_audio_supported":false,"hotspot_supported":true,"input_management_supported":true,"multi_user_supported":true,"multichannel_group_supported":false,"multizone_supported":true,"night_mode_supported":true,"night_mode_supported_v2":true,"opencast_supported":true,"preview_channel_supported":true,"proxy_server_supported":false,"reboot_supported":true,"remote_ducking_supported":true,"setup_supported":true,"show_debug_overlay_supported":false,"stats_supported":true,"system_sound_effects_supported":false,"ui_flipping_supported":false,"user_eq_supported":true,"wifi_regulatory_domain_locked":true,"wifi_supported":true},"cloud_device_id":"XXXXX","factory_country_code":"US","hotspot_bssid":"XX:XX:XX:XX:XX:XX","mac_address":"XX:XX:XX:XX:XX:XX","manufacturer":"Google Inc.","model_name":"Google Home","product_name":"pineapple","public_key":"XXXXX","ssdp_udn":"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx","uma_client_id":"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx","uptime":4332.29},"multizone":{"audio_output_delay":0,"audio_output_delay_oem":0,"aux_in_group":"","groups":[],"multichannel_status":0},"name":"Living Room","net":{"ethernet_connected":false,"ip_address":"192.168.X.X","online":true},"night_mode_params":{"do_not_disturb":true,"enabled":false,"led_brightness":0.44999998807907104,"volume":0.46000000834465027,"windows":[{"days":[0,1,2,3,4,5,6],"length_hours":8,"start_hour":22}]},"opencast":{"pin_code":"4602"},"opt_in":{"audio_hdr":false,"audio_surround_mode":0,"autoplay_on_signal":true,"cloud_ipc":true,"hdmi_prefer_50hz":false,"hdmi_prefer_high_fps":true,"opencast":true,"preview_channel":true,"remote_ducking":true,"stats":true,"ui_flipped":false},"proxy":{"mode":"system"},"settings":{"closed_caption":{},"control_notifications":2,"country_code":"IN","locale":"en-US","network_standby":0,"system_sound_effects":true,"time_format":1,"timezone":"Asia/Kolkata","wake_on_cast":1},"setup":{"setup_state":60,"ssid_suffix":"k","stats":{"num_check_connectivity":0,"num_connect_wifi":0,"num_connected_wifi_not_saved":0,"num_initial_eureka_info":0,"num_obtain_ip":0},"tos_accepted":true},"user_eq":{"high_shelf":{"frequency":4500,"gain_db":0,"quality":0.707},"low_shelf":{"frequency":150,"gain_db":0,"quality":0.707},"max_peaking_eqs":0,"peaking_eqs":[]},"version":9,"wifi":{"bssid":"XX:XX:XX:XX:XX:XX","has_changes":false,"noise_level":-92,"signal_level":-52,"ssid":"XXXXX","wpa_configured":true,"wpa_id":1,"wpa_state":10}}



## Get App Device Id [/setup/get_app_device_id]

### App Device ID [POST]
This gives "app device id", "certificate" and "signed data".  

The `app_id` in the request is mandatory and refers to Chromecast backdrop/screensaver app. It has to be set to `E8C28D3C`.  



The certificate is valid and issued by `Chromecast ICA 6 (Audio Assist), Google Inc`.  

Not sure what the other two are.

+ Request (application/json)
    + Attributes (App Device IDRequest)

    + Body

            {
                "app_id": "E8C28D3C"
            }


+ Response 200 (application/json)
    + Attributes (App Device IDResponse)

    + Body

            {"app_device_id":"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX","certificate":"-----BEGIN CERTIFICATE-----\nMIIDyzCCArOgAwIBAgIEWAVEujANBgkqhkiG9w0BAQUFADCBiDELMAkGA1UEBhMC\nVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDU1vdW50YWluIFZpZXcx\nEzARBgNVBAoMCkdvb2dsZSBJbmMxDTALBgNVBAsMBENhc3QxKDAmBgNVBAMMH0No\ncm9tZWNhc3QgSUNBIDYgKEF1ZGlvIEFzc2lzdCkwHhcNMTYxMDE3MjEzODAyWhcN\nMzYxMDEyMjEzODAyWjB8MRMwEQYDVQQIDApDYWxpZm9ybmlhMQswCQYDVQQGEwJV\nUzEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzENMAsGA1UECwwEQ2FzdDETMBEGA1UE\nCgwKR29vZ2xlIEluYzEcMBoGA1UEAwwTQVkwTTdOIEZBOEZDQTMwNDE3MTCCASIw\nDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJrs4oARV4dn68gam78NWTscGx+x\np6hm23DQWdazzkoRdUdmb/BnCNPWCM1sw6eVKoc+wfiNtE2RSXO72+WBS11LAf3u\n/7SIpuTs63oQCZoijAbJ58sF6VLgItt1NrtLOGyE2zyCowWnVXgS0KJbZn6Gy3fn\nc6qWNW7RVl99vuUctjKVep0iRpXk2f/7gNjZZVSssg/BfN55NFaYvArmppJJu4RZ\nR7sEu+Jd+zO9a93Re8wDGEHnLAvw5TuVwkRrm2+rLWOzej+6TBuF8pXKfttwGb47\n/6JDD28rwEH1aT263BZolPTf6GqPyjKqiK42pOE6GU4iwKllC+y2irHhwLkCAwEA\nAaNIMEYwCQYDVR0TBAIwADALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH\nAwIwFwYDVR0gBBAwDjAMBgorBgEEAdZ5AgUCMA0GCSqGSIb3DQEBBQUAA4IBAQCu\nOkrf/PVBaDPWR+YeiE/3UauwMXCN4VakJ7OYG3hy1r6AhA62H3ITdM2cXCV7T9NL\nDSL02DphIsbU1Us9uUU3v7tiWy5A1VT23EPqsJYFk146VySDvqg7xx6xkpHs7r59\ntn2tffpxUjSeUep1VQpcQpgcVT2JZHt4LwNtbbXyu3U98bz/dT78QIFYtu5WTqRA\nyOaw+0nAI6hrEbPnoJ/8rtb1WCmB4zmvoLiamwajwMaEzQrF9oc04LCHSHgRmFqy\nGopFA2pW8eHR8RYzds3HRExxx4E8HozV8V2EoQC9hmfE48Teky4SXzCWf9arFNXq\nqwp7/thZVuJIg+BZOeb0\n-----END CERTIFICATE-----\n","signed_data":"HAjp4Jqm6vKiIsQxAIF6jHmVSomqW4gC5W67OY1NzhPnmCQW2pjF2hWnaeTXwkd3DlI4tu+VsLR8q9pfEAV1KAJseku43f3iT6mg7etJ5HMym6y97ri4LB2tva1dxfK3YhIPVyGdEc4s2O+eTrI6kmY1nXxXLKuTeF8Hg+Akp2eOREljj+KNwVa+LA5EWtcA3Lq09qAfBcWj0fu+A1Gxi1YZNvDfjcrz3SF32hzXHl24xADxvbnlJ6O0atQNqvybB5ENaaqOoSoRct9JhuVRT8EkJd3MWm3gwADEA3hP11Oo8m3GIuBhcF3VBt946035kg9rf+9GLF+fme2sJQBGuA=="}


+ Response 404 

        Not Found





## Offer [/setup/offer]

### Offer [GET]
This gives a token which is used by the Home app to get offers. The offers themselves are not stored on the device.  

A new token is generated for every request.

+ Response 200 (application/json)
    + Attributes (OfferResponse)

    + Body

            {"token":"ADtqmfShz74YuyEyF8hNAP8uLTEKGZjp-qnKOAzuXYcYWw5H9dqtUBOYxN_gOyvR9ibEefxiM0EZaiBWhwvPkBg1jnLNdCycWuCv9bKdn-6zUa06a6sah55gvtA8VkiDObuc8RKmvB2tq3UCAM9u_7xnZNHFswfbW99Lh1-qAp-NB0xZIu-un3JKZ0EfMQywHMs9fNY_QjcDgaLyqaqAsAE1GwZZ_IEtmw=="}



## Assistant Check Ready Status [/setup/assistant/check_ready_status]

### Check Ready Status [POST]

+ Request (application/json)
    + Attributes (Check Ready StatusRequest)

    + Body

            {
                "play_ready_message": false,
                "user_id": "xxxxx"
            }


+ Response 200 




## Supported Timezones [/setup/supported_timezones]

### Timezones [GET]
Simply returns a list of all supported timezones.

+ Response 200 (application/json)
    + Attributes (array[TimezonesResponse])

    + Body

            [{"display_string":"Samoa Standard Time (Midway)","offset":-660,"timezone":"Pacific/Midway"},{"display_string":"Hawaii-Aleutian Standard Time (Honolulu)","offset":-600,"timezone":"Pacific/Honolulu"},{"display_string":"Alaska Daylight Time (Anchorage)","offset":-480,"timezone":"America/Anchorage"},{"display_string":"Pacific Daylight Time (Los Angeles)","offset":-420,"timezone":"America/Los_Angeles"},{"display_string":"Pacific Daylight Time (Vancouver)","offset":-420,"timezone":"America/Vancouver"},{"display_string":"Pacific Daylight Time (Tijuana)","offset":-420,"timezone":"America/Tijuana"},{"display_string":"Mountain Standard Time (Phoenix)","offset":-420,"timezone":"America/Phoenix"},{"display_string":"Mountain Daylight Time (Denver)","offset":-360,"timezone":"America/Denver"},{"display_string":"Mountain Daylight Time (Edmonton)","offset":-360,"timezone":"America/Edmonton"},{"display_string":"Mexican Pacific Daylight Time (Chihuahua)","offset":-360,"timezone":"America/Chihuahua"},{"display_string":"Central Standard Time (Regina)","offset":-360,"timezone":"America/Regina"},{"display_string":"Central Standard Time (Costa Rica)","offset":-360,"timezone":"America/Costa_Rica"},{"display_string":"Central Daylight Time (Chicago)","offset":-300,"timezone":"America/Chicago"},{"display_string":"Central Daylight Time (Mexico City)","offset":-300,"timezone":"America/Mexico_City"},{"display_string":"Central Daylight Time (Winnipeg)","offset":-300,"timezone":"America/Winnipeg"},{"display_string":"Colombia Standard Time (Bogota)","offset":-300,"timezone":"America/Bogota"},{"display_string":"Eastern Daylight Time (New York)","offset":-240,"timezone":"America/New_York"},{"display_string":"Eastern Daylight Time (Toronto)","offset":-240,"timezone":"America/Toronto"},{"display_string":"Venezuela Time (Caracas)","offset":-240,"timezone":"America/Caracas"},{"display_string":"Atlantic Standard Time (Barbados)","offset":-240,"timezone":"America/Barbados"},{"display_string":"Atlantic Daylight Time (Halifax)","offset":-180,"timezone":"America/Halifax"},{"display_string":"Amazon Standard Time (Manaus)","offset":-240,"timezone":"America/Manaus"},{"display_string":"Chile Standard Time (Santiago)","offset":-240,"timezone":"America/Santiago"},{"display_string":"Newfoundland Daylight Time (St Johns)","offset":-150,"timezone":"America/St_Johns"},{"display_string":"Brasilia Standard Time (Sao Paulo)","offset":-180,"timezone":"America/Sao_Paulo"},{"display_string":"Brasilia Standard Time (Araguaina)","offset":-180,"timezone":"America/Araguaina"},{"display_string":"Argentina Standard Time (Buenos Aires)","offset":-180,"timezone":"America/Argentina/Buenos_Aires"},{"display_string":"Western Argentina Standard Time (San Luis)","offset":-180,"timezone":"America/Argentina/San_Luis"},{"display_string":"Uruguay Standard Time (Montevideo)","offset":-180,"timezone":"America/Montevideo"},{"display_string":"West Greenland Summer Time (Godthab)","offset":-120,"timezone":"America/Godthab"},{"display_string":"South Georgia Time (South Georgia)","offset":-120,"timezone":"Atlantic/South_Georgia"},{"display_string":"Cape Verde Standard Time (Cape Verde)","offset":-60,"timezone":"Atlantic/Cape_Verde"},{"display_string":"Azores Summer Time (Azores)","offset":0,"timezone":"Atlantic/Azores"},{"display_string":"Western European Standard Time (Casablanca)","offset":0,"timezone":"Africa/Casablanca"},{"display_string":"British Summer Time (London)","offset":60,"timezone":"Europe/London"},{"display_string":"Irish Standard Time (Dublin)","offset":60,"timezone":"Europe/Dublin"},{"display_string":"Central European Summer Time (Amsterdam)","offset":120,"timezone":"Europe/Amsterdam"},{"display_string":"Central European Summer Time (Belgrade)","offset":120,"timezone":"Europe/Belgrade"},{"display_string":"Central European Summer Time (Berlin)","offset":120,"timezone":"Europe/Berlin"},{"display_string":"Central European Summer Time (Brussels)","offset":120,"timezone":"Europe/Brussels"},{"display_string":"Central European Summer Time (Copenhagen)","offset":120,"timezone":"Europe/Copenhagen"},{"display_string":"Western European Summer Time (Lisbon)","offset":60,"timezone":"Europe/Lisbon"},{"display_string":"Central European Summer Time (Madrid)","offset":120,"timezone":"Europe/Madrid"},{"display_string":"Central European Summer Time (Oslo)","offset":120,"timezone":"Europe/Oslo"},{"display_string":"Central European Summer Time (Paris)","offset":120,"timezone":"Europe/Paris"},{"display_string":"Central European Summer Time (Rome)","offset":120,"timezone":"Europe/Rome"},{"display_string":"Central European Summer Time (Stockholm)","offset":120,"timezone":"Europe/Stockholm"},{"display_string":"Central European Summer Time (Sarajevo)","offset":120,"timezone":"Europe/Sarajevo"},{"display_string":"Central European Summer Time (Vienna)","offset":120,"timezone":"Europe/Vienna"},{"display_string":"Central European Summer Time (Warsaw)","offset":120,"timezone":"Europe/Warsaw"},{"display_string":"Central European Summer Time (Zurich)","offset":120,"timezone":"Europe/Zurich"},{"display_string":"Central Africa Time (Windhoek)","offset":120,"timezone":"Africa/Windhoek"},{"display_string":"West Africa Standard Time (Lagos)","offset":60,"timezone":"Africa/Lagos"},{"display_string":"West Africa Standard Time (Brazzaville)","offset":60,"timezone":"Africa/Brazzaville"},{"display_string":"Eastern European Standard Time (Cairo)","offset":120,"timezone":"Africa/Cairo"},{"display_string":"Central Africa Time (Harare)","offset":120,"timezone":"Africa/Harare"},{"display_string":"Central Africa Time (Maputo)","offset":120,"timezone":"Africa/Maputo"},{"display_string":"South Africa Standard Time (Johannesburg)","offset":120,"timezone":"Africa/Johannesburg"},{"display_string":"Eastern European Summer Time (Helsinki)","offset":180,"timezone":"Europe/Helsinki"},{"display_string":"Eastern European Summer Time (Athens)","offset":180,"timezone":"Europe/Athens"},{"display_string":"Eastern European Summer Time (Amman)","offset":180,"timezone":"Asia/Amman"},{"display_string":"Eastern European Summer Time (Beirut)","offset":180,"timezone":"Asia/Beirut"},{"display_string":"Israel Daylight Time (Jerusalem)","offset":180,"timezone":"Asia/Jerusalem"},{"display_string":"Moscow Standard Time (Minsk)","offset":180,"timezone":"Europe/Minsk"},{"display_string":"Arabian Standard Time (Baghdad)","offset":180,"timezone":"Asia/Baghdad"},{"display_string":"Arabian Standard Time (Riyadh)","offset":180,"timezone":"Asia/Riyadh"},{"display_string":"Arabian Standard Time (Kuwait)","offset":180,"timezone":"Asia/Kuwait"},{"display_string":"East Africa Time (Nairobi)","offset":180,"timezone":"Africa/Nairobi"},{"display_string":"Iran Daylight Time (Tehran)","offset":270,"timezone":"Asia/Tehran"},{"display_string":"Moscow Standard Time (Moscow)","offset":180,"timezone":"Europe/Moscow"},{"display_string":"Gulf Standard Time (Dubai)","offset":240,"timezone":"Asia/Dubai"},{"display_string":"Georgia Standard Time (Tbilisi)","offset":240,"timezone":"Asia/Tbilisi"},{"display_string":"Mauritius Standard Time (Mauritius)","offset":240,"timezone":"Indian/Mauritius"},{"display_string":"Azerbaijan Standard Time (Baku)","offset":240,"timezone":"Asia/Baku"},{"display_string":"Armenia Standard Time (Yerevan)","offset":240,"timezone":"Asia/Yerevan"},{"display_string":"Afghanistan Time (Kabul)","offset":270,"timezone":"Asia/Kabul"},{"display_string":"Pakistan Standard Time (Karachi)","offset":300,"timezone":"Asia/Karachi"},{"display_string":"Turkmenistan Standard Time (Ashgabat)","offset":300,"timezone":"Asia/Ashgabat"},{"display_string":"West Kazakhstan Time (Oral)","offset":300,"timezone":"Asia/Oral"},{"display_string":"India Standard Time (Kolkata)","offset":330,"timezone":"Asia/Kolkata"},{"display_string":"India Standard Time (Colombo)","offset":330,"timezone":"Asia/Colombo"},{"display_string":"Nepal Time (Kathmandu)","offset":345,"timezone":"Asia/Kathmandu"},{"display_string":"Yekaterinburg Standard Time (Yekaterinburg)","offset":300,"timezone":"Asia/Yekaterinburg"},{"display_string":"East Kazakhstan Time (Almaty)","offset":360,"timezone":"Asia/Almaty"},{"display_string":"Bangladesh Standard Time (Dhaka)","offset":360,"timezone":"Asia/Dhaka"},{"display_string":"Myanmar Time (Rangoon)","offset":390,"timezone":"Asia/Rangoon"},{"display_string":"Indochina Time (Bangkok)","offset":420,"timezone":"Asia/Bangkok"},{"display_string":"Western Indonesia Time (Jakarta)","offset":420,"timezone":"Asia/Jakarta"},{"display_string":"Omsk Standard Time (Omsk)","offset":360,"timezone":"Asia/Omsk"},{"display_string":"Novosibirsk Standard Time (Novosibirsk)","offset":420,"timezone":"Asia/Novosibirsk"},{"display_string":"China Standard Time (Shanghai)","offset":480,"timezone":"Asia/Shanghai"},{"display_string":"Hong Kong Standard Time (Hong Kong)","offset":480,"timezone":"Asia/Hong_Kong"},{"display_string":"Malaysia Time (Kuala Lumpur)","offset":480,"timezone":"Asia/Kuala_Lumpur"},{"display_string":"Singapore Standard Time (Singapore)","offset":480,"timezone":"Asia/Singapore"},{"display_string":"Philippine Standard Time (Manila)","offset":480,"timezone":"Asia/Manila"},{"display_string":"Taipei Standard Time (Taipei)","offset":480,"timezone":"Asia/Taipei"},{"display_string":"Central Indonesia Time (Makassar)","offset":480,"timezone":"Asia/Makassar"},{"display_string":"Krasnoyarsk Standard Time (Krasnoyarsk)","offset":420,"timezone":"Asia/Krasnoyarsk"},{"display_string":"Australian Western Standard Time (Perth)","offset":480,"timezone":"Australia/Perth"},{"display_string":"Australian Central Western Standard Time (Eucla)","offset":525,"timezone":"Australia/Eucla"},{"display_string":"Irkutsk Standard Time (Irkutsk)","offset":480,"timezone":"Asia/Irkutsk"},{"display_string":"Korean Standard Time (Seoul)","offset":540,"timezone":"Asia/Seoul"},{"display_string":"Japan Standard Time (Tokyo)","offset":540,"timezone":"Asia/Tokyo"},{"display_string":"Eastern Indonesia Time (Jayapura)","offset":540,"timezone":"Asia/Jayapura"},{"display_string":"Australian Central Standard Time (Adelaide)","offset":570,"timezone":"Australia/Adelaide"},{"display_string":"Australian Central Standard Time (Darwin)","offset":570,"timezone":"Australia/Darwin"},{"display_string":"Australian Eastern Standard Time (Brisbane)","offset":600,"timezone":"Australia/Brisbane"},{"display_string":"Australian Eastern Standard Time (Hobart)","offset":600,"timezone":"Australia/Hobart"},{"display_string":"Australian Eastern Standard Time (Sydney)","offset":600,"timezone":"Australia/Sydney"},{"display_string":"Yakutsk Standard Time (Yakutsk)","offset":540,"timezone":"Asia/Yakutsk"},{"display_string":"Chamorro Standard Time (Guam)","offset":600,"timezone":"Pacific/Guam"},{"display_string":"Papua New Guinea Time (Port Moresby)","offset":600,"timezone":"Pacific/Port_Moresby"},{"display_string":"Vladivostok Standard Time (Vladivostok)","offset":600,"timezone":"Asia/Vladivostok"},{"display_string":"Sakhalin Standard Time (Sakhalin)","offset":660,"timezone":"Asia/Sakhalin"},{"display_string":"Magadan Standard Time (Magadan)","offset":660,"timezone":"Asia/Magadan"},{"display_string":"New Zealand Standard Time (Auckland)","offset":720,"timezone":"Pacific/Auckland"},{"display_string":"Fiji Standard Time (Fiji)","offset":720,"timezone":"Pacific/Fiji"},{"display_string":"Marshall Islands Time (Majuro)","offset":720,"timezone":"Pacific/Majuro"},{"display_string":"Tonga Standard Time (Tongatapu)","offset":780,"timezone":"Pacific/Tongatapu"},{"display_string":"Apia Standard Time (Apia)","offset":780,"timezone":"Pacific/Apia"},{"display_string":"Line Islands Time (Kiritimati)","offset":840,"timezone":"Pacific/Kiritimati"}]



## Supported Locales [/setup/supported_locales]

### Locales [GET]
Simply returns a list of all supported locales.

+ Response 200 (application/json)
    + Attributes (array[LocalesResponse])

    + Body

            [{"display_string":"Amharic - አማርኛ","locale":"am"},{"display_string":"Arabic - العربية","locale":"ar"},{"display_string":"Bulgarian - български","locale":"bg"},{"display_string":"Bangla - বাংলা","locale":"bn"},{"display_string":"Catalan - català","locale":"ca"},{"display_string":"Czech - čeština","locale":"cs"},{"display_string":"Danish - dansk","locale":"da"},{"display_string":"German - Deutsch","locale":"de"},{"display_string":"Greek - Ελληνικά","locale":"el"},{"display_string":"English (United Kingdom)","locale":"en-GB"},{"display_string":"English (United States)","locale":"en-US"},{"display_string":"Spanish - español","locale":"es"},{"display_string":"Estonian - eesti","locale":"et"},{"display_string":"Persian - فارسی","locale":"fa"},{"display_string":"Finnish - suomi","locale":"fi"},{"display_string":"Filipino","locale":"fil"},{"display_string":"French - français","locale":"fr"},{"display_string":"Gujarati - ગુજરાતી","locale":"gu"},{"display_string":"Hebrew - עברית","locale":"he"},{"display_string":"Hindi - हिन्दी","locale":"hi"},{"display_string":"Croatian - hrvatski","locale":"hr"},{"display_string":"Hungarian - magyar","locale":"hu"},{"display_string":"Indonesian - Indonesia","locale":"id"},{"display_string":"Italian - italiano","locale":"it"},{"display_string":"Japanese - 日本語","locale":"ja"},{"display_string":"Kannada - ಕನ್ನಡ","locale":"kn"},{"display_string":"Korean - 한국어","locale":"ko"},{"display_string":"Lithuanian - lietuvių","locale":"lt"},{"display_string":"Latvian - latviešu","locale":"lv"},{"display_string":"Malayalam - മലയാളം","locale":"ml"},{"display_string":"Marathi - मराठी","locale":"mr"},{"display_string":"Malay - Melayu","locale":"ms"},{"display_string":"Norwegian Bokmål - norsk bokmål","locale":"nb"},{"display_string":"Dutch - Nederlands","locale":"nl"},{"display_string":"Polish - polski","locale":"pl"},{"display_string":"Portuguese (Portugal) - português (Portugal)","locale":"pt-PT"},{"display_string":"Romanian - română","locale":"ro"},{"display_string":"Russian - русский","locale":"ru"},{"display_string":"Slovak - slovenčina","locale":"sk"},{"display_string":"Slovenian - slovenščina","locale":"sl"},{"display_string":"Serbian - српски","locale":"sr"},{"display_string":"Swedish - svenska","locale":"sv"},{"display_string":"Swahili - Kiswahili","locale":"sw"},{"display_string":"Tamil - தமிழ்","locale":"ta"},{"display_string":"Telugu - తెలుగు","locale":"te"},{"display_string":"Thai - ไทย","locale":"th"},{"display_string":"Turkish - Türkçe","locale":"tr"},{"display_string":"Ukrainian - українська","locale":"uk"},{"display_string":"Vietnamese - Tiếng Việt","locale":"vi"},{"display_string":"Chinese (Simplified) - 中文（简体）","locale":"zh-CN"},{"display_string":"Chinese (Traditional) - 中文（繁體）","locale":"zh-TW"},{"display_string":"Spanish (Latin America) - español (Latinoamérica)","locale":"es-419"},{"display_string":"Portuguese (Brazil) - português (Brasil)","locale":"pt-BR"},{"display_string":"English (Australia)","locale":"en-AU"},{"display_string":"English (Canada)","locale":"en-CA"},{"display_string":"English (India)","locale":"en-IN"},{"display_string":"English (Singapore)","locale":"en-SG"},{"display_string":"Spanish (United States) - español (Estados Unidos)","locale":"es-US"},{"display_string":"French (Canada) - français (Canada)","locale":"fr-CA"}]




# Group Device Settings

## Set Eureka Info [/setup/set_eureka_info]

### Set Eureka Info [POST]
This can set custom values to some options.  

Only fields to be modified need to be sent, not all. The example has all modifiable fields (#TODO).  

Sending non-existant fields will still return a 200 OK, but they are not saved.

+ Request (application/json)
    + Attributes (Set Eureka InfoRequest)

    + Body

            {
                "name": "Living Room",
                "settings": {
                    "control_notifications": 2
                },
                "opt_in": {
                    "opencast": true,
                    "preview_channel": true,
                    "remote_ducking": true,
                    "stats": true
                }
            }


+ Response 200 

    + Headers

            Access-Control-Allow-Headers:Content-Type
            Cache-Control:no-cache
            Content-Length:0

    + Attributes (object)



## Assistant Set Night Mode Params [/setup/assistant/set_night_mode_params]

### Night Mode settings [POST]
This sets night mode options.  

To view currently set values, use /setup/eureka_info.  

If `enabled` is set to false, night mode is disabled and the other values do not matter.  

`led_brightness` and `volume` refer to the maximum LED Brightness and Volume that is set during night mode.  

`demo_to_user` is always set to `true` so change in values will be visible in realtime (like brightness).  

`windows`: A combination of `length_hours` and `start_hour` is used to define start and end times for night mode. In this example, night mode starts at 10 PM (22) and ends at 6 AM (8 hours later). `windows.days` is an array of days of week when night mode will be enabled. Example: 0->Sunday, 1-> Monday, ..., 6->Saturday.

+ Request (application/json)
    + Attributes (Night Mode settingsRequest)

    + Body

            {
                "enabled": false,
                "do_not_disturb": true,
                "led_brightness": 0.44999998807907104,
                "volume": 0.46000000834465027,
                "demo_to_user": true,
                "windows": [
                    {
                        "length_hours": 8,
                        "days": [
                            0,
                            1,
                            2,
                            3,
                            4,
                            5,
                            6
                        ],
                        "start_hour": 22
                    }
                ]
            }


+ Response 200 (application/json)
    + Attributes (Night Mode settingsResponse)

    + Body

            {"do_not_disturb":true,"enabled":false,"led_brightness":0.44999998807907104,"volume":0.46000000834465027,"windows":[{"days":[0,1,2,3,4,5,6],"length_hours":8.0,"start_hour":22.0}]}



## Reboot [/setup/reboot]

### Reboot and Factory Reset [POST]
This can simply reboot the device (`params: "now"`) or factory reset the device (`params: "fdr"`).

+ Request Reboot (application/json)
    + Attributes (Reboot and Factory ResetRequest)

    + Body

            {
                "params": "now"
            }


+ Response 200 

    + Headers

            Access-Control-Allow-Headers:Content-Type
            Cache-Control:no-cache
            Content-Length:0

    + Attributes (object)


+ Request Factory Reset (application/json)
    + Attributes (Reboot and Factory ResetRequest)

    + Body

            {
                "params": "fdr"
            }


+ Response 200 

    + Headers

            Access-Control-Allow-Headers:Content-Type
            Cache-Control:no-cache
            Content-Length:0

    + Attributes (object)




# Group Assistant

## Assistant Notifications [/setup/assistant/notifications]

### Do Not Disturb [POST]
This is for the Do Not Disturb option. Sending an empty-body POST returns the current value. Sending a new value changes it.

+ Request Get current state (application/json)



+ Response 200 (application/json)
    + Attributes (Do Not DisturbRequest)

    + Body

            {"notifications_enabled":true}


+ Request Set new state (application/json)
    + Attributes (Do Not DisturbResponse)

    + Body

            {"notifications_enabled":true}
    

+ Response 200 (application/json)
    + Attributes (Do Not DisturbResponse)

    + Body

            {"notifications_enabled":true}



## Assistant A11y Mode [/setup/assistant/a11y_mode]

### Accessibility [POST]
This controls Accessibility sounds. `hotword_enabled` is for 'Play start sound' and `endpoint_enabled` is for 'Play end sound'.  

Sending an empty-body POST request returns the current values.  

Either of the fields or both can be sent and new values will be saved.

+ Request Get current values (application/json)
    + Attributes (AccessibilityRequest)


+ Response 200 (application/json)
    + Attributes (AccessibilityResponse)

    + Body

            {"endpoint_enabled":false,"hotword_enabled":false}


+ Request Set new values (application/json)
    + Attributes (AccessibilityRequest)

    + Body

            {
                "hotword_enabled": false,
                "endpoint_enabled": false
            }


+ Response 200 (application/json)
    + Attributes (AccessibilityResponse)

    + Body

            {"endpoint_enabled":false,"hotword_enabled":false}



## Assistant Alarms [/setup/assistant/alarms]

### Get Alarms and Timers [GET]
This gives a list of all active alarms and timers.



Both alarms and timers have `id`s which can be used to delete them. (There is no known way of creating/deleting yet). The value of `status` have different meanings for alarms and timers (given below).



Alarms have `date_pattern` and `time_pattern` with day, month, year, hour, minute, second. `fire_time` is the same in unix time (milliseconds, not seconds).  

`status` is 1 for set up and 2 for ringing.



Timers have `original_duration` is the original duration.  

`status` is 1 for set up and 3 for ringing.

+ Response 200 (application/json)
    + Attributes (Get Alarms and TimersResponse)

    + Body

            {"alarm":[{"date_pattern":{"day":15,"month":1,"year":2018},"time_pattern":{"hour":6,"minute":50,"second":0},"fire_time":1515995400000.0,"id":"alarm/xxx","status":1}],"timer":[{"fire_time":1516176765589,"id":"timer/xxx","original_duration":20000,"status":1}]}



## Assistant Alarms Delete [/setup/assistant/alarms/delete]

### Delete Alarms and Timers [POST]
This deletes alarms and timers by their id.



`ids` is a list of ids to be deleted. Sending invalid id still returns a 200 OK. The `/` in the ids have to be escaped like `\/`.

+ Request (application/json)
    + Attributes (Delete Alarms and TimersRequest)

    + Body

            {
                "ids": [
                    "timer/xxx",
                    "alarm/xxx"
                ]
            }


+ Response 200 (application/json)
    + Attributes (Delete Alarms and TimersResponse)

    + Body

            {"success":true}



## Assistant Alarms Volume [/setup/assistant/alarms/volume]

### Alarm Volume [POST]
This gets and sets alarms and timers volume.  

**Note:** This is not the same as normal volume.



Volume is a float number in [0, 1] where 0 is minimum and 1 is maximum.  

Sending an empty body gets the volume. Sending `volume` sets the volume.

+ Request Get volume (application/json)
    + Attributes (Alarm VolumeRequest)


+ Response 200 (application/json)
    + Attributes (Alarm VolumeResponse)

    + Body

            {"volume":1.0}


+ Request Set volume (application/json)
    + Attributes (Alarm VolumeRequest)

    + Body

            {
                "volume": 1
            }


+ Response 200 (application/json)
    + Attributes (Alarm VolumeResponse)

    + Body

            {"volume":1.0}



## User Eq Set Equalizer [/setup/user_eq/set_equalizer]

### Set Equalizer Values [POST]
This can only set new equalizer values. To get already set values, use /setup/eureka_info.



The body is mandatory. It can either contain `low_shelf` or `high_shelf` or both.



`low_shelf.gain_db` is an integer ranging from -6 to +6 for bass.

`high_shelf.gain_db` is an integer ranging from -6 to +6 for treble.

+ Request (application/json)
    + Attributes (Set Equalizer ValuesRequest)

    + Body

            {
                "low_shelf": {
                    "gain_db": 0
                },
                "high_shelf": {
                    "gain_db": 0
                }
            }


+ Response 200 





# Group Bluetooth TODO

## Bluetooth Status [/setup/bluetooth/status]

### Status [GET]
> **There are 2 parts of Bluetooth.**

>

> *Part 1*: Devices like phones connect to Home and play audio through Home.  

> For this, /setup/bluetooth/discovery is used to make Home discoverable. Then devices can connect to it as if Home is just another bluetooth speaker.

>

> *Part 2*: Bluetooth speakers connect to Home and Home plays audio through the speakers.

> For this, /setup/bluetooth/scan and /setup/bluetooth/scan_results are used to connect to other speakers.

>

> The other endpoints are common for both parts.





**For both parts**



This gives the status of all bluetooth things.

Not sure what `audio_mode` is.  

`discovery_enabled` states whether Home is discoverable. (**Part 1**)  

`scanning_enabled` states whether Home scanning for other bluetooth speakers/devices. (**Part 2**)

+ Response 200 (application/json)
    + Attributes (StatusResponse)

    + Body

            {"audio_mode":1,"connected_devices":[],"connecting_devices":[],"discovery_enabled":false,"scanning_enabled":false}



## Bluetooth Get Bonded [/setup/bluetooth/get_bonded]

### Get Paired Devices TODO [GET]
*See note for Bluetooth under `/setup/bluetooth/status`*



**For both parts**



This gives a list of all paired or 'bonded' devices.

+ Response 200 (application/json)
    + Attributes (array[Get Paired Devices TODOResponse])

    + Body

            [{"bond_date":1503212407260.55,"device_class":5898764,"device_type":1,"last_connect_date":1514807829482.1111,"mac_address":"xx:xx:xx:xx:xx:xx","name":"Device Name","rssi":-255,"service_uuids":["xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx","xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"]}]



## Bluetooth Bond [/setup/bluetooth/bond]

### Forget paired device [POST]
*See note for Bluetooth under /setup/bluetooth/status*



**For both parts**



This is to forget paired devices by mac address. Works for both kinds of devices (Part 1 and Part 2).

+ Request (application/json)
    + Attributes (Forget paired deviceRequest)

    + Body

            {
                "mac_address": "xx:xx:xx:xx:xx:xx",
                "bond": false
            }


+ Response 200 
    + Attributes (object)



## Bluetooth Discovery [/setup/bluetooth/discovery]

### Change Discoverability [POST]
*See note for Bluetooth under /setup/bluetooth/status*



**For Part 1 only**



This enables/disables Home's bluetooth discovery and other devices can pair with Home (where Home acts as a speaker).

+ Request Set discoverable (application/json)
    + Attributes (Change DiscoverabilityRequest)

    + Body

            {
                "enable_discovery": true
            }


+ Response 200 
    + Attributes (object)


+ Request Set non-discoverable (application/json)
    + Attributes (Change DiscoverabilityRequest)

    + Body

            {
                "enable_discovery": false
            }


+ Response 200 
    + Attributes (object)



## Bluetooth Scan [/setup/bluetooth/scan]

### Scan for devices [POST]
*See note for Bluetooth under /setup/bluetooth/status*



**For Part 2 only**



This initiates scan for other bluetooth speakers/devices. Scan results will be updated continuously for `timeout` seconds.  

To get the scan results, see /setup/bluetooth/scan_results.

+ Request (application/json)
    + Attributes (Scan for devicesRequest)

    + Body

            {
                "enable": true,
                "clear_results": true,
                "timeout": 60
            }


+ Response 200 

    + Headers

            Access-Control-Allow-Headers:Content-Type
            Cache-Control:no-cache
            Content-Length:0

    + Attributes (object)



## Bluetooth Scan Results [/setup/bluetooth/scan_results]

### Get Scan Results [GET]
*See note for Bluetooth under /setup/bluetooth/status*



**For Part 2 only**



This returns a list of all nearby bluetooth devices. While the Home app only shows speakers, this list contains all devices including TVs, mobiles, etc.



`rssi` is signal strength, `name` is name, `mac_address` is mac address.  

`device_class` and `device_type` still need testing. #TODO

+ Response 200 (application/json)
    + Attributes (array[Get Scan ResultsResponse])

    + Body

            [{"device_class":525372,"device_type":3,"expected_profiles":0,"mac_address":"54:13:79:49:19:22","name":"KD-49X8200E","rssi":-90},{"device_class":5898764,"device_type":1,"expected_profiles":0,"mac_address":"94:14:7a:5c:62:a3","name":"vivo 1714","rssi":-96},{"device_class":2491396,"device_type":1,"expected_profiles":1,"mac_address":"94:14:7a:5c:62:a3","name":"PHILIPS BT64","rssi":-93}]



## Bluetooth Connect [/setup/bluetooth/connect]

### Pair with Speaker [POST]
*See note for Bluetooth under /setup/bluetooth/status*



**For Part 2 only**



This pairs with other bluetooth speakers by mac address.

+ Request (application/json)
    + Attributes (Pair with SpeakerRequest)

    + Body

            {
                "mac_address": "54:13:79:49:19:22",
                "connect": true,
                "profile": 2
            }


+ Response 200 





# Group Wifi

## Configured Networks [/setup/configured_networks]

### Get Saved Networks [GET]
This gets a list of all saved Wi-Fi networks.



Each network has `ssid`, `wpa_auth`, `wpa_cipher` and `wpa_id`.  

`wpa_id` is an incrementing number used to identify a saved network.  

#TODO: Add values for `wpa_auth` and `wpa_cipher`.

+ Response 200 (application/json)
    + Attributes (array[Get Saved NetworksResponse])

    + Body

            [{"ssid":"Wifi name","wpa_auth":7,"wpa_cipher":4,"wpa_id":0}]



## Scan Wifi [/setup/scan_wifi]

### Scan for Networks [POST]
This initiates scanning for Wi-Fi networks.



For Chromecasts, this is required to populate results. For Google Home, this is not required. /setup/scan_results is always updated. (Related to [GitHub #22](https://github.com/rithvikvibhu/GHLocalApi/issues/22)).

+ Response 200 
    + Attributes (object)



## Scan Results [/setup/scan_results]

### Get WiFi Scan Results [GET]
This gets a list of all nearby Wi-Fi access points.

+ Response 200 (application/json)
    + Attributes (array[Get WiFi Scan ResultsResponse])

    + Body

            [{"bssid":"APBSSID1","signal_level":-20,"ssid":"APSSID1","wpa_auth":7,"wpa_cipher":4,"wpa_id":0}]



## Connect Wifi [/setup/connect_wifi]

### Connect to WiFi Network [POST]
**Note:** Not sure how the password is encrypted. Might be using the public certificate from /setup/eureka_info. So this cannot be used as of now. If someone figures it out, [create a new issue here](https://github.com/rithvikvibhu/GHLocalApi/issues/new).

+ Request (application/json)
    + Attributes (Connect to WiFi NetworkRequest)

    + Body

            {
                "bssid": "5c:0a:xx:xx:xx:xx",
                "signal_level": -42,
                "ssid": "myotherssid",
                "wpa_auth": 7,
                "wpa_cipher": 4,
                "enc_passwd": "xxxxxfPY="
            }


+ Response 200 




## Forget Wifi [/setup/forget_wifi]

### Forget WiFi Network [POST]
This is to forget a saved network by `wpa_id`. Get the `wpa_id` from /setup/configured_networks

+ Request (application/json)
    + Attributes (Forget WiFi NetworkRequest)

    + Body

            {
                "wpa_id": 0
            }


+ Response 200 
    + Attributes (object)




# Data Structures

## Eureka InfoResponse (object)


### Properties
+ `audio` (Audio, required) 
+ `build_info` (BuildInfo, required) 
+ `detail` (Detail, required) 
+ `device_info` (DeviceInfo, required) 
+ `multizone` (Multizone, required) 
+ `name`: `Living Room` (string, required) 
+ `net`: `Living Room` (Net, required) 
+ `night_mode_params`: `Living Room` (NightModeParams, required) 
+ `opencast`: `Living Room` (Opencast, required) 
+ `opt_in`: `Living Room` (OptIn, required) 
+ `proxy`: `Living Room` (Proxy, required) 
+ `settings`: `Living Room` (Settings, required) 
+ `setup`: `Living Room` (Setup, required) 
+ `user_eq`: `Living Room` (UserEq, required) 
+ `version`: `9` (number, required) 
+ `wifi`: `9` (Wifi, required) 


## Audio (object)


### Properties
+ `digital`: `false` (boolean, required) 


## BuildInfo (object)


### Properties
+ `build_type`: `2` (number, required) 
+ `cast_build_revision`: `1.32.118652` (string, required) 
+ `cast_control_version`: `1` (number, required) 
+ `preview_channel_state`: `4` (number, required) 
+ `release_track`: `preview-joining-stable-channel` (string, required) 
+ `system_build_number`: `118652` (string, required) 


## Detail (object)


### Properties
+ `icon_list` (array[IconList], required) 
+ `locale` (Locale, required) 
+ `timezone` (Timezone, required) 


## IconList (object)


### Properties
+ `depth`: `32` (number, required) 
+ `height`: `55` (number, required) 
+ `mimetype`: `image/png` (string, required) 
+ `url`: `/setup/icon.png` (string, required) 
+ `width`: `98` (number, required) 


## Locale (object)


### Properties
+ `display_string`: `English (United States)` (string, required) 


## Timezone (object)


### Properties
+ `display_string`: `India Standard Time (Kolkata)` (string, required) 
+ `offset`: `330` (number, required) 


## DeviceInfo (object)


### Properties
+ `4k_blocked`: `0` (number, required) 
+ `capabilities`: `0` (Capabilities, required) 
+ `cloud_device_id`: `XXXXX` (string, required) 
+ `factory_country_code`: `US` (string, required) 
+ `hotspot_bssid`: `XX:XX:XX:XX:XX:XX` (string, required) 
+ `mac_address`: `XX:XX:XX:XX:XX:XX` (string, required) 
+ `manufacturer`: `Google Inc.` (string, required) 
+ `model_name`: `Google Home` (string, required) 
+ `product_name`: `pineapple` (string, required) 
+ `public_key`: `XXXXX` (string, required) 
+ `ssdp_udn`: `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` (string, required) 
+ `uma_client_id`: `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx` (string, required) 
+ `uptime`: `4332.29` (number, required) 


## Capabilities (object)


### Properties
+ `assistant_supported`: `true` (boolean, required) 
+ `audio_hdr_supported`: `false` (boolean, required) 
+ `audio_surround_mode_supported`: `false` (boolean, required) 
+ `ble_supported`: `true` (boolean, required) 
+ `bluetooth_audio_sink_supported`: `true` (boolean, required) 
+ `bluetooth_audio_source_supported`: `true` (boolean, required) 
+ `bluetooth_supported`: `true` (boolean, required) 
+ `cloudcast_supported`: `true` (boolean, required) 
+ `display_supported`: `false` (boolean, required) 
+ `fdr_supported`: `false` (boolean, required) 
+ `hdmi_prefer_50hz_supported`: `false` (boolean, required) 
+ `hdmi_prefer_high_fps_supported`: `false` (boolean, required) 
+ `hi_res_audio_supported`: `false` (boolean, required) 
+ `hotspot_supported`: `true` (boolean, required) 
+ `input_management_supported`: `true` (boolean, required) 
+ `multi_user_supported`: `true` (boolean, required) 
+ `multichannel_group_supported`: `false` (boolean, required) 
+ `multizone_supported`: `true` (boolean, required) 
+ `night_mode_supported`: `true` (boolean, required) 
+ `night_mode_supported_v2`: `true` (boolean, required) 
+ `opencast_supported`: `true` (boolean, required) 
+ `preview_channel_supported`: `true` (boolean, required) 
+ `proxy_server_supported`: `false` (boolean, required) 
+ `reboot_supported`: `true` (boolean, required) 
+ `remote_ducking_supported`: `true` (boolean, required) 
+ `setup_supported`: `true` (boolean, required) 
+ `show_debug_overlay_supported`: `false` (boolean, required) 
+ `stats_supported`: `true` (boolean, required) 
+ `system_sound_effects_supported`: `false` (boolean, required) 
+ `ui_flipping_supported`: `false` (boolean, required) 
+ `user_eq_supported`: `true` (boolean, required) 
+ `wifi_regulatory_domain_locked`: `true` (boolean, required) 
+ `wifi_supported`: `true` (boolean, required) 


## Multizone (object)


### Properties
+ `audio_output_delay`: `0` (number, required) 
+ `audio_output_delay_oem`: `0` (number, required) 
+ `aux_in_group` (string, required) 
+ `groups`: `[]` (array[string], required) 
+ `multichannel_status`: `0` (number, required) 


## Net (object)


### Properties
+ `ethernet_connected`: `false` (boolean, required) 
+ `ip_address`: `192.168.X.X` (string, required) 
+ `online`: `true` (boolean, required) 


## NightModeParams (object)


### Properties
+ `do_not_disturb`: `true` (boolean, required) 
+ `enabled`: `false` (boolean, required) 
+ `led_brightness`: `0.449999988079071` (number, required) 
+ `volume`: `0.46000000834465` (number, required) 
+ `windows`: `0.46000000834465` (array[Window], required) 


## Window (object)


### Properties
+ `days`: `[
  0,
  1,
  2,
  3,
  4,
  5,
  6
]` (array[number], required) 
+ `length_hours`: `8` (number, required) 
+ `start_hour`: `22` (number, required) 


## Opencast (object)


### Properties
+ `pin_code`: `4602` (string, required) 


## OptIn (object)


### Properties
+ `audio_hdr`: `false` (boolean, required) 
+ `audio_surround_mode`: `0` (number, required) 
+ `autoplay_on_signal`: `true` (boolean, required) 
+ `cloud_ipc`: `true` (boolean, required) 
+ `hdmi_prefer_50hz`: `false` (boolean, required) 
+ `hdmi_prefer_high_fps`: `true` (boolean, required) 
+ `opencast`: `true` (boolean, required) 
+ `preview_channel`: `true` (boolean, required) 
+ `remote_ducking`: `true` (boolean, required) 
+ `stats`: `true` (boolean, required) 
+ `ui_flipped`: `false` (boolean, required) 


## Proxy (object)


### Properties
+ `mode`: `system` (string, required) 


## Settings (object)


### Properties
+ `closed_caption`: `{}` (object, required) 
+ `control_notifications`: `2` (number, required) 
+ `country_code`: `IN` (string, required) 
+ `locale`: `en-US` (string, required) 
+ `network_standby`: `0` (number, required) 
+ `system_sound_effects`: `true` (boolean, required) 
+ `time_format`: `1` (number, required) 
+ `timezone`: `Asia/Kolkata` (string, required) 
+ `wake_on_cast`: `1` (number, required) 


## Setup (object)


### Properties
+ `setup_state`: `60` (number, required) 
+ `ssid_suffix`: `k` (string, required) 
+ `stats`: `k` (Stats, required) 
+ `tos_accepted`: `true` (boolean, required) 


## Stats (object)


### Properties
+ `num_check_connectivity`: `0` (number, required) 
+ `num_connect_wifi`: `0` (number, required) 
+ `num_connected_wifi_not_saved`: `0` (number, required) 
+ `num_initial_eureka_info`: `0` (number, required) 
+ `num_obtain_ip`: `0` (number, required) 


## UserEq (object)


### Properties
+ `high_shelf` (HighShelf, required) 
+ `low_shelf` (LowShelf, required) 
+ `max_peaking_eqs`: `0` (number, required) 
+ `peaking_eqs`: `[]` (array[string], required) 


## HighShelf (object)


### Properties
+ `frequency`: `4500` (number, required) 
+ `gain_db`: `0` (number, required) 
+ `quality`: `0.707` (number, required) 


## LowShelf (object)


### Properties
+ `frequency`: `150` (number, required) 
+ `gain_db`: `0` (number, required) 
+ `quality`: `0.707` (number, required) 


## Wifi (object)


### Properties
+ `bssid`: `XX:XX:XX:XX:XX:XX` (string, required) 
+ `has_changes`: `false` (boolean, required) 
+ `noise_level`: `-92` (number, required) 
+ `signal_level`: `-52` (number, required) 
+ `ssid`: `XXXXX` (string, required) 
+ `wpa_configured`: `true` (boolean, required) 
+ `wpa_id`: `1` (number, required) 
+ `wpa_state`: `10` (number, required) 


## App Device IDRequest (object)


### Properties
+ `app_id`: `E8C28D3C` (string, required) 


## App Device IDResponse (object)


### Properties
+ `app_device_id`: `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX` (string, required) 
+ `certificate`: `-----BEGIN CERTIFICATE-----
MIIDyzCCArOgAwIBAgIEWAVEujANBgkqhkiG9w0BAQUFADCBiDELMAkGA1UEBhMC
VVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcMDU1vdW50YWluIFZpZXcx
EzARBgNVBAoMCkdvb2dsZSBJbmMxDTALBgNVBAsMBENhc3QxKDAmBgNVBAMMH0No
cm9tZWNhc3QgSUNBIDYgKEF1ZGlvIEFzc2lzdCkwHhcNMTYxMDE3MjEzODAyWhcN
MzYxMDEyMjEzODAyWjB8MRMwEQYDVQQIDApDYWxpZm9ybmlhMQswCQYDVQQGEwJV
UzEWMBQGA1UEBwwNTW91bnRhaW4gVmlldzENMAsGA1UECwwEQ2FzdDETMBEGA1UE
CgwKR29vZ2xlIEluYzEcMBoGA1UEAwwTQVkwTTdOIEZBOEZDQTMwNDE3MTCCASIw
DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJrs4oARV4dn68gam78NWTscGx+x
p6hm23DQWdazzkoRdUdmb/BnCNPWCM1sw6eVKoc+wfiNtE2RSXO72+WBS11LAf3u
/7SIpuTs63oQCZoijAbJ58sF6VLgItt1NrtLOGyE2zyCowWnVXgS0KJbZn6Gy3fn
c6qWNW7RVl99vuUctjKVep0iRpXk2f/7gNjZZVSssg/BfN55NFaYvArmppJJu4RZ
R7sEu+Jd+zO9a93Re8wDGEHnLAvw5TuVwkRrm2+rLWOzej+6TBuF8pXKfttwGb47
/6JDD28rwEH1aT263BZolPTf6GqPyjKqiK42pOE6GU4iwKllC+y2irHhwLkCAwEA
AaNIMEYwCQYDVR0TBAIwADALBgNVHQ8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUH
AwIwFwYDVR0gBBAwDjAMBgorBgEEAdZ5AgUCMA0GCSqGSIb3DQEBBQUAA4IBAQCu
Okrf/PVBaDPWR+YeiE/3UauwMXCN4VakJ7OYG3hy1r6AhA62H3ITdM2cXCV7T9NL
DSL02DphIsbU1Us9uUU3v7tiWy5A1VT23EPqsJYFk146VySDvqg7xx6xkpHs7r59
tn2tffpxUjSeUep1VQpcQpgcVT2JZHt4LwNtbbXyu3U98bz/dT78QIFYtu5WTqRA
yOaw+0nAI6hrEbPnoJ/8rtb1WCmB4zmvoLiamwajwMaEzQrF9oc04LCHSHgRmFqy
GopFA2pW8eHR8RYzds3HRExxx4E8HozV8V2EoQC9hmfE48Teky4SXzCWf9arFNXq
qwp7/thZVuJIg+BZOeb0
-----END CERTIFICATE-----` (string, required) 
+ `signed_data`: `HAjp4Jqm6vKiIsQxAIF6jHmVSomqW4gC5W67OY1NzhPnmCQW2pjF2hWnaeTXwkd3DlI4tu+VsLR8q9pfEAV1KAJseku43f3iT6mg7etJ5HMym6y97ri4LB2tva1dxfK3YhIPVyGdEc4s2O+eTrI6kmY1nXxXLKuTeF8Hg+Akp2eOREljj+KNwVa+LA5EWtcA3Lq09qAfBcWj0fu+A1Gxi1YZNvDfjcrz3SF32hzXHl24xADxvbnlJ6O0atQNqvybB5ENaaqOoSoRct9JhuVRT8EkJd3MWm3gwADEA3hP11Oo8m3GIuBhcF3VBt946035kg9rf+9GLF+fme2sJQBGuA==` (string, required) 


## OfferResponse (object)


### Properties
+ `token`: `ADtqmfShz74YuyEyF8hNAP8uLTEKGZjp-qnKOAzuXYcYWw5H9dqtUBOYxN_gOyvR9ibEefxiM0EZaiBWhwvPkBg1jnLNdCycWuCv9bKdn-6zUa06a6sah55gvtA8VkiDObuc8RKmvB2tq3UCAM9u_7xnZNHFswfbW99Lh1-qAp-NB0xZIu-un3JKZ0EfMQywHMs9fNY_QjcDgaLyqaqAsAE1GwZZ_IEtmw==` (string, required) 


## Check Ready StatusRequest (object)


### Properties
+ `play_ready_message`: `false` (boolean, required) 
+ `user_id`: `xxxxx` (string, required) 


## TimezonesResponse (object)


### Properties
+ `display_string`: `Samoa Standard Time (Midway)` (string, required) 
+ `offset`: `-660` (number, required) 
+ `timezone`: `Pacific/Midway` (string, required) 


## LocalesResponse (object)


### Properties
+ `display_string`: `Amharic - አማርኛ` (string, required) 
+ `locale`: `am` (string, required) 


## Set Eureka InfoRequest (object)


### Properties
+ `name`: `Living Room` (string, required) 
+ `settings`: `Living Room` (Settings30, required) 
+ `opt_in`: `Living Room` (OptIn31, required) 


## Settings30 (object)


### Properties
+ `control_notifications`: `2` (number, required) 


## OptIn31 (object)


### Properties
+ `opencast`: `true` (boolean, required) 
+ `preview_channel`: `true` (boolean, required) 
+ `remote_ducking`: `true` (boolean, required) 
+ `stats`: `true` (boolean, required) 


## Night Mode settingsRequest (object)


### Properties
+ `enabled`: `false` (boolean, required) 
+ `do_not_disturb`: `true` (boolean, required) 
+ `led_brightness`: `0.449999988079071` (number, required) 
+ `volume`: `0.46000000834465` (number, required) 
+ `demo_to_user`: `true` (boolean, required) 
+ `windows`: `true` (array[Window], required) 


## Night Mode settingsResponse (object)


### Properties
+ `do_not_disturb`: `true` (boolean, required) 
+ `enabled`: `false` (boolean, required) 
+ `led_brightness`: `0.449999988079071` (number, required) 
+ `volume`: `0.46000000834465` (number, required) 
+ `windows`: `0.46000000834465` (array[Window35], required) 


## Window35 (object)


### Properties
+ `days`: `[
  0,
  1,
  2,
  3,
  4,
  5,
  6
]` (array[number], required) 
+ `length_hours`: `8` (number, required) 
+ `start_hour`: `22` (number, required) 


## Reboot and Factory ResetRequest (object)


### Properties
+ `params`: `now` (string, required) 


## Do Not DisturbRequest (object)


### Properties
+ `notifications_enabled`: `true` (boolean, required) 


## Do Not DisturbResponse (object)


### Properties
+ `notifications_enabled`: `true` (boolean, required) 


## AccessibilityRequest (object)


### Properties
+ `hotword_enabled`: `false` (boolean, required) 
+ `endpoint_enabled`: `false` (boolean, required) 


## AccessibilityResponse (object)


### Properties
+ `endpoint_enabled`: `false` (boolean, required) 
+ `hotword_enabled`: `false` (boolean, required) 


## Get Alarms and TimersResponse (object)


### Properties
+ `alarm` (array[Alarm], required) 
+ `timer` (array[Timer], required) 


## Alarm (object)


### Properties
+ `date_pattern` (DatePattern, required) 
+ `time_pattern` (TimePattern, required) 
+ `fire_time`: `1515995400000` (number, required) 
+ `id`: `alarm/xxx` (string, required) 
+ `status`: `1` (number, required) 


## DatePattern (object)


### Properties
+ `day`: `15` (number, required) 
+ `month`: `1` (number, required) 
+ `year`: `2018` (number, required) 


## TimePattern (object)


### Properties
+ `hour`: `6` (number, required) 
+ `minute`: `50` (number, required) 
+ `second`: `0` (number, required) 


## Timer (object)


### Properties
+ `fire_time`: `1516176765589` (number, required) 
+ `id`: `timer/xxx` (string, required) 
+ `original_duration`: `20000` (number, required) 
+ `status`: `1` (number, required) 


## Delete Alarms and TimersRequest (object)


### Properties
+ `ids`: `[
  "timer/xxx",
  "alarm/xxx"
]` (array[string], required) 


## Delete Alarms and TimersResponse (object)


### Properties
+ `success`: `true` (boolean, required) 


## Alarm VolumeRequest (object)


### Properties
+ `volume`: `1` (number, required) 


## Alarm VolumeResponse (object)


### Properties
+ `volume`: `1` (number, required) 


## Set Equalizer ValuesRequest (object)


### Properties
+ `low_shelf` (LowShelf50, required) 
+ `high_shelf` (HighShelf51, required) 


## LowShelf50 (object)


### Properties
+ `gain_db`: `0` (number, required) 


## HighShelf51 (object)


### Properties
+ `gain_db`: `0` (number, required) 


## StatusResponse (object)


### Properties
+ `audio_mode`: `1` (number, required) 
+ `connected_devices`: `[]` (array[string], required) 
+ `connecting_devices`: `[]` (array[string], required) 
+ `discovery_enabled`: `false` (boolean, required) 
+ `scanning_enabled`: `false` (boolean, required) 


## Get Paired Devices TODOResponse (object)


### Properties
+ `bond_date`: `1503212407260.55` (number, required) 
+ `device_class`: `5898764` (number, required) 
+ `device_type`: `1` (number, required) 
+ `last_connect_date`: `1514807829482.11` (number, required) 
+ `mac_address`: `xx:xx:xx:xx:xx:xx` (string, required) 
+ `name`: `Device Name` (string, required) 
+ `rssi`: `-255` (number, required) 
+ `service_uuids`: `[
  "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
  "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
]` (array[string], required) 


## Forget paired deviceRequest (object)


### Properties
+ `mac_address`: `xx:xx:xx:xx:xx:xx` (string, required) 
+ `bond`: `false` (boolean, required) 


## Change DiscoverabilityRequest (object)


### Properties
+ `enable_discovery`: `true` (boolean, required) 


## Scan for devicesRequest (object)


### Properties
+ `enable`: `true` (boolean, required) 
+ `clear_results`: `true` (boolean, required) 
+ `timeout`: `60` (number, required) 


## Get Scan ResultsResponse (object)


### Properties
+ `device_class`: `525372` (number, required) 
+ `device_type`: `3` (number, required) 
+ `expected_profiles`: `0` (number, required) 
+ `mac_address`: `54:13:79:49:19:22` (string, required) 
+ `name`: `KD-49X8200E` (string, required) 
+ `rssi`: `-90` (number, required) 


## Pair with SpeakerRequest (object)


### Properties
+ `mac_address`: `54:13:79:49:19:22` (string, required) 
+ `connect`: `true` (boolean, required) 
+ `profile`: `2` (number, required) 


## Get Saved NetworksResponse (object)


### Properties
+ `ssid`: `Wifi name` (string, required) 
+ `wpa_auth`: `7` (number, required) 
+ `wpa_cipher`: `4` (number, required) 
+ `wpa_id`: `0` (number, required) 


## Get WiFi Scan ResultsResponse (object)


### Properties
+ `bssid`: `APBSSID1` (string, required) 
+ `signal_level`: `-20` (number, required) 
+ `ssid`: `APSSID1` (string, required) 
+ `wpa_auth`: `7` (number, required) 
+ `wpa_cipher`: `4` (number, required) 
+ `wpa_id`: `0` (number, required) 


## Connect to WiFi NetworkRequest (object)


### Properties
+ `bssid`: `5c:0a:xx:xx:xx:xx` (string, required) 
+ `signal_level`: `-42` (number, required) 
+ `ssid`: `myotherssid` (string, required) 
+ `wpa_auth`: `7` (number, required) 
+ `wpa_cipher`: `4` (number, required) 
+ `enc_passwd`: `xxxxxfPY=` (string, required) 


## Forget WiFi NetworkRequest (object)


### Properties
+ `wpa_id`: `0` (number, required) 
